<?php

require_once "Attribute.php";

class ConceptDao
{
    /**
     * @var PDO
     */
    private $pdo;

    public function __construct(\PDO $pdo)
    {
        $this->pdo = $pdo;
    }

    /**
     * @return string[] the names of the concepts.
     */
    public function getConcepts()
    {
        $conceptNames = [];
        $pdoStatement = $this->pdo->prepare('SELECT table_name FROM information_schema.tables where table_schema=\'register\'');
        $pdoStatement->execute();
        $tables = $pdoStatement->fetchAll();
        foreach($tables as $key => $table)
        {
            if (strpos($table["table_name"], '_') !== 0)
            {
                $conceptNames[]= $table["table_name"];
            }
        }
        return $conceptNames;
    }

    /**
     * @param string $concept
     * @return string[]
     */
    public function getAttributesNames($concept)
    {
        $columns = [];
        $pdoStatement = $this->pdo->prepare('SELECT COLUMN_NAME FROM information_schema.columns WHERE table_schema=\'register\' AND table_name=\''.$concept.'\'' );
        $pdoStatement->execute();
        $tables = $pdoStatement->fetchAll();
        foreach($tables as $key => $table)
        {
            $columns[]= $table["COLUMN_NAME"];
        }
        return $columns;

    }

    /**
     * @param string $concept
     * @return Attribute[]
     */
    public function getAttributes($concept)
    {
        $attributes = [];
        $pdoStatement = $this->pdo->prepare('SELECT * FROM information_schema.columns WHERE table_schema=\'register\' AND table_name=\''.$concept.'\'' );
        $pdoStatement->execute();
        $tables = $pdoStatement->fetchAll();
        foreach($tables as $key => $table)
        {
            $attribute = new Attribute();
            $attribute->name = $table["COLUMN_NAME"];
            $attribute->type = $table["COLUMN_TYPE"];
            $attributes[]= $attribute;
        }
        return $attributes;

    }

    public function getDataForConcept($concept)
    {
        $pdoStatement = $this->pdo->prepare('SELECT * FROM '.$concept );
        $pdoStatement->execute();
        $data = $pdoStatement->fetchAll();
        return $data;
    }

    public function addTableColumn($tablename, $columnName, $type)
    {
        $pdoStatement = $this->pdo->prepare("ALTER TABLE $tablename ADD COLUMN $columnName $type");
        $success = $pdoStatement->execute();
        if (!$success)
        {
            var_dump($pdoStatement->errorInfo());
            var_dump("ALTER TABLE $tablename ADD COLUMN $columnName $type");
        }
        return $success;
    }

    /**
     * @param $concept
     * @param $map
     * @param bool $sliceOffset
     * @return int
     * @throws Exception
     */
    public function addDataForConcept($concept, $map, $sliceOffset = true)
    {
        $attributes = $this->getAttributes($concept);
        $values = [];
        $attributeNames = [];
        if ($sliceOffset)
        {
            $attributes = array_slice($attributes, 1); //slice off the autogenerated id.
        }
        foreach($attributes as $attribute)
        {
            $value = @$map[$attribute->name];
            $attributeNames []= $attribute->name;
            if ($attribute->isBoolean())
            {
                if ($value === "on") {
                    $value = 1;
                } else{
                    $value = 0;
                }

            } else if ($attribute->isInt()) {
                $value = (int)$value;
            } else if ($attribute->isEnum()) {
                $value = "'$value'";
            }else if ($attribute->isVarchar() || $attribute->isText()) {
                $value = "'$value'";
            }
            else if ($attribute->isDouble()) {
                $value = (double)$value;
            }else {
                throw new Exception("Unknown attribute type");
            }
            $values []= $value;
        }
        $sql = "INSERT INTO $concept (".implode(",", $attributeNames).") VALUES(".implode(",", $values).")";
        $this->pdo->exec($sql);
    }

    public function createConcept($concept)
    {
        $pdoStatement = $this->pdo->prepare("CREATE TABLE $concept (id${concept} INT UNSIGNED AUTO_INCREMENT PRIMARY KEY)");
        $success = $pdoStatement->execute();
        if (!$success) {
            var_dump($pdoStatement->errorInfo());
        }
        return $success;
    }

    public function dropTable($concept)
    {
        $pdoStatement = $this->pdo->prepare("DROP TABLE $concept");
        $success = $pdoStatement->execute();
        if (!$success) {
            var_dump($pdoStatement->errorInfo());
        }
        return $success;

    }

    public function linkConcept($sourceconcept, $destinationconcept)
    {
        $pdoStatement = $this->pdo->prepare("CREATE TABLE _${sourceconcept}2${destinationconcept} (id${sourceconcept} INT, id${destinationconcept} INT)");
        $success = $pdoStatement->execute();
        if (!$success) {
            var_dump($pdoStatement->errorInfo());
        }
        return $success;
    }

    /***
     * @return array
     */
    public function getConceptLinks()
    {
        $conceptNames = [];
        $pdoStatement = $this->pdo->prepare('SELECT table_name FROM information_schema.tables where table_schema=\'register\'');
        $pdoStatement->execute();
        $tables = $pdoStatement->fetchAll();
        foreach($tables as $key => $table)
        {
            if (strpos($table["table_name"], '_') === 0)
            {
                $conceptNames[]= explode('2', substr($table["table_name"],1));
            }
        }
        return $conceptNames;
    }

    public function deleteData($concept, $id)
    {
        $pdoStatement = $this->pdo->prepare('DELETE FROM '.$concept.' WHERE id'.$concept.'='.$id);
        $success = $pdoStatement->execute();
        if (!$success) {
            var_dump($pdoStatement->errorInfo());
        }
        return $success;
    }

    public function getCombinedDataForConcept($concept1, $concept2)
    {
        /**
         * SELECT * FROM _donor2sample
         *   INNER JOIN donor ON donor.iddonor = _donor2sample.iddonor
         *   INNER JOIN sample ON sample.idsample = _donor2sample.idsample;

         */
        $jointable = "_${concept1}2${concept2}";
        $pdoStatement = $this->pdo->prepare('SELECT * FROM ' . $jointable . ' INNER JOIN '. $concept1 . ' ON '. "${concept1}.id${concept1} = ${jointable}.id${concept1}"
        . ' INNER JOIN '. $concept2 . ' ON '. "${concept2}.id${concept2} = ${jointable}.id${concept2}");
        $pdoStatement->execute();
        $data = $pdoStatement->fetchAll();
        return $data;

    }

    public function showCreateTable($concept)
    {
        $pdoStatement = $this->pdo->prepare('SHOW CREATE TABLE '.$concept);
        $pdoStatement->execute();
        return $pdoStatement->fetchAll();
    }

    public function getById($concept, $id)
    {
        $pdoStatement = $this->pdo->prepare('SELECT * FROM '.$concept . " WHERE id${concept} = $id");
        $pdoStatement->execute();
        return $pdoStatement->fetchAll()[0];
    }

    public function updateDataForConcept($concept, $id, $map, $sliceOffset = true)
    {
        $attributes = $this->getAttributes($concept);
        $attributeNames = [];
        $attributes = array_slice($attributes, 1); //slice off the autogenerated id.
        $setStrings = [];
        foreach($attributes as $attribute)
        {
            $value = @$map[$attribute->name];
            $attributeNames []= $attribute->name;
            if ($attribute->isBoolean())
            {
                if ($value === "on") {
                    $value = 1;
                } else{
                    $value = 0;
                }

            } else if ($attribute->isInt()) {
                $value = (int)$value;
            } else if ($attribute->isEnum()) {
                $value = "'$value'";
            }else if ($attribute->isVarchar() || $attribute->isText()) {
                $value = "'$value'";
            }else if ($attribute->isDouble()) {
                $value = (double)$value;
            } else {
                throw new Exception("Unknown attribute type");
            }
            $setStrings []= $attribute->name . "=" . $value;

        }
        $success = $this->pdo->exec("UPDATE $concept SET ".implode(",", $setStrings)." WHERE id${concept} = $id");
        if ($success === FALSE)
        {
            var_dump($this->pdo->errorInfo());
        }
        return $success !== FALSE;
    }

    public function dropTableColumn($concept, $columnname)
    {
        $pdoStatement = $this->pdo->prepare('ALTER TABLE '.$concept.' DROP COLUMN '.$columnname);
        $pdoStatement->execute();
    }

    public function updateColumn($concept, $oldcolumnname, $name, $type)
    {
        error_log('ALTER TABLE '.$concept.' CHANGE '.$oldcolumnname . ' '.$name . ' '.$type);
        $pdoStatement = $this->pdo->prepare('ALTER TABLE '.$concept.' CHANGE '.$oldcolumnname . ' '.$name . ' '.$type);
        $pdoStatement->execute();

    }


}